{"version":3,"sources":["config.js","components/Login/login-queryParams.tsx","components/Login/Spotify_Logo_RGB_Green.png","components/Login/login-index.tsx","components/Main/Genres/Genre Item/genre-item-index.tsx","components/Main/Genres/genres-helpers.tsx","components/common/Searchbar/searchbar-index.tsx","components/Main/Genres/genres-index.tsx","apiService.tsx","components/Main/main-helpers.tsx","components/Main/Artists/Artist Item/artist-item-index.tsx","components/Main/Artists/artists-index.tsx","components/Main/Playlist/Playlist Item/playlist-item-helpers.tsx","components/Main/Playlist/Playlist Item/playlist-item-index.tsx","components/Main/Playlist/playlist-index.tsx","components/Main/Spotify_Icon_RGB_Green.png","components/Main/Modal/modal-index.tsx","components/Main/main-index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["require","config","module","exports","clientId","process","redirectUri","serverBaseUrl","baseUrl","queryParams","client_id","response_type","redirect_uri","scope","params","queryUrl","encodeURIComponent","Login","className","src","logo","alt","href","GenreItem","genreName","artistCount","selected","selectHandler","onClick","getMatchingGenres","searchValue","genres","searchRegex","RegExp","Object","entries","filter","key","match","reduce","acc","value","countUnselected","genreList","artists","genreArtists","selectedArtists","artist","genreArtist","some","selectedArtist","id","isSelected","artistInArtists","find","userDisabled","length","SearchBar","placeholder","setSearchValue","type","onChange","e","target","Genres","loaded","useState","keys","sort","a","b","countBasedOnSelectStatus","genre","map","size","color","loading","clientToken","getToken","code","fetch","method","body","JSON","stringify","headers","response","json","getTracks","getArtists","nextUrl","createPlaylist","playlistName","trackURIs","playlistData","getPlaylistCover","playlistId","fetchArtistsWithOffset","setState","Promise","resolve","fetchArtistsAsync","artistData","next","newArtists","items","artistObj","prevArtists","updatedArtists","generateGenres","genreDb","forEach","artistGenre","push","getSelectedTracks","tracks","trackItem","track","trackArtist","findIndex","ArtistItem","toggleHandler","images","url","name","Artists","artistList","convertMsToMinsAndSecs","ms","minutes","Math","floor","seconds","parseInt","toFixed","PlaylistItem","disabled","join","album","moment","added_at","fromNow","duration_ms","Playlist","createHandler","nameField","setNameField","disabledTrackIds","setDisabledTrackIds","savingPlaylist","setSavingPlaylist","toggleTrackHandler","trackId","includes","disabledId","updatedDisabledTrackIds","submitHandler","preventDefault","uri","action","onSubmit","customStyles","content","top","left","right","bottom","marginRight","padding","opacity","transform","overlay","zIndex","PlaylistCreatedModal","isOpen","playlist","onRequestClose","style","external_urls","spotify","cover","Main","location","useLocation","searchParams","URLSearchParams","search","setTracks","setArtists","setGenres","createdPlaylist","setCreatedPlaylist","React","modalIsOpen","setIsOpen","get","reject","setTimeout","playlistCover","useEffect","then","trackList","console","log","fetchData","list","selectedGenres","i","markGenreArtists","icon","newGenreDb","assign","artistId","updatedArtist","artistToggleUpdate","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.193cbc2d.chunk.js","sourcesContent":["require('dotenv').config();\n\nconst inProduction = process.env.NODE_ENV === 'production';\n\nmodule.exports = {\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  redirectUri: inProduction ? process.env.REACT_APP_REDIRECT_URI : process.env.REACT_APP_REDIRECT_URI_LOCAL,\n  serverBaseUrl: inProduction ? process.env.REACT_APP_SERVER_BASE_URL : process.env.REACT_APP_SERVER_BASE_URL_LOCAL\n};","const baseUrl = 'https://accounts.spotify.com/authorize';\nconst { clientId, redirectUri } = require('config');\n\ninterface QueryParams {\n  client_id: string,\n  response_type: string,\n  redirect_uri: string,\n  scope: string\n}\n\nconst queryParams: QueryParams = {\n  client_id: clientId,\n  response_type: 'code',\n  redirect_uri: redirectUri,\n  scope: 'user-library-read user-follow-read user-follow-modify playlist-modify-public'\n}\n\nfunction buildQueryUrl (url: string, params: QueryParams) : string {\n  return `${baseUrl}?client_id=${params.client_id}&response_type=${params.response_type}&redirect_uri=${params.redirect_uri}&scope=${encodeURIComponent(queryParams.scope)}`;\n}\n\nconst queryUrl = buildQueryUrl(baseUrl, queryParams);\n\nexport {queryUrl};","export default __webpack_public_path__ + \"static/media/Spotify_Logo_RGB_Green.0c4ae91b.png\";","import * as React from 'react';\nimport { queryUrl } from './login-queryParams';\nimport './login-style.scss';\nimport logo from './Spotify_Logo_RGB_Green.png';\n\nconst Login: React.FC = () => {\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-content\">\n        <h1>Listspotter.</h1>\n        <p>Create playlists from your saved songs in <img className=\"spotify-logo\" src={logo} alt=\"\"/> using intuitive genre filters.</p>\n        <a href={queryUrl} className=\"button-login\">LOGIN</a>\n      </div>\n    </div>\n   );\n}\n\nexport default Login;","import './genre-item-style.scss';\nimport * as React from 'react';\n\nexport interface Props {\n  genreName: string,\n  artistCount: number | '',\n  selected: boolean,\n  selectHandler: (genreName: string) => void\n}\n\nconst GenreItem: React.FC<Props> = ({ genreName, artistCount, selected, selectHandler }) => {\n\n  function clickHandler () {\n    selectHandler(genreName);\n  }\n\n  return (\n    <a className={'genre-item-container' + (selected ? ' selected' : '')} onClick={clickHandler}>\n      {genreName} {selected ? '' : <span className='artist-count'>{' +' + artistCount + ' artist' + (artistCount > 1 ? 's' : '')}</span>}\n    </a>\n  );\n}\n\nexport default GenreItem;","import { GenreDb } from 'interfaces/genreObjects';\nimport { Artist } from 'interfaces/spotifyObjects';\n\nexport function getSortedGenreKeys (genres: GenreDb, selectedArtists: Artist[]) {\n  const sortedKeys = Object.keys(genres).sort((a, b) => {\n    if (genres[a].selected && !genres[b].selected) return -1;\n    if (!genres[a].selected && genres[b].selected) return 1;\n\n    function countBasedOnSelectStatus (genre: string) {\n      return genres[genre].selected ? genres[genre].artists.length : countUnselected(genres, genre, selectedArtists)\n    };\n\n    return countBasedOnSelectStatus(a) > countBasedOnSelectStatus(b)  ? -1 : 1\n  });\n\n  return sortedKeys;\n}\n\nexport function getMatchingGenres (searchValue: string, genres: GenreDb) {\n  const searchRegex = new RegExp(searchValue, 'ig');\n\n  return Object.entries(genres).filter(([key, value]) => key.match(searchRegex))\n    .reduce<GenreDb>((acc, [key, value]) => {\n      acc[key] = value\n      return acc;\n    }, {});\n}\n\nexport function genreResort (genreName: string, db: GenreDb) {\n  const splitName = genreName.split(' ');\n}\n\nexport function countUnselected (genreList: GenreDb, genreName: string, artists: Artist[]) {\n  const genreArtists = genreList[genreName].artists;\n  const selectedArtists = artists.filter((artist) => artist.selected);\n\n  const isSelected = (genreArtist: Artist) => selectedArtists.some((selectedArtist) => selectedArtist.id === genreArtist.id);\n  const userDisabled = (genreArtist: Artist) => {\n    const artistInArtists = artists.find((artist) => artist.id === genreArtist.id);\n    return artistInArtists?.userDisabled;\n  };\n\n  return genreArtists.filter((genreArtist) => !isSelected(genreArtist) && !userDisabled(genreArtist)).length;\n}","import './searchbar-style.scss';\n\nexport interface Props {\n  placeholder: string,\n  searchValue: string,\n  setSearchValue: (value: React.SetStateAction<string>) => void\n}\n\nconst SearchBar: React.FC<Props> = ({ placeholder, searchValue, setSearchValue }) => {\n  return (\n    <div className='searchbar'>\n    <input type='text' className='search-input' placeholder={placeholder} value={searchValue} onChange={(e) => setSearchValue(e.target.value)}/>\n\n    {searchValue &&\n    <a onClick={() => setSearchValue('')}><i className=\"fas fa-times\"></i></a>\n    }\n  </div>\n  );\n}\n\nexport default SearchBar;","import * as React from 'react';\nimport { useState } from 'react';\nimport './genres-style.scss';\nimport GenreItem from './Genre Item/genre-item-index';\nimport { GenreDb } from 'interfaces/genreObjects';\nimport { Artist } from 'interfaces/spotifyObjects';\nimport { getSortedGenreKeys, getMatchingGenres, countUnselected } from './genres-helpers';\nimport { WaveSpinner } from 'react-spinners-kit';\nimport SearchBar from 'components/common/Searchbar/searchbar-index';\n\nexport interface Props {\n  genreList: GenreDb,\n  artists: Artist[],\n  selectHandler: (genreName: string) => void;\n  loaded: boolean;\n}\n\nconst Genres: React.FC<Props> = ({genreList, artists, selectHandler, loaded}) => {\n  let [searchValue, setSearchValue] = useState('');\n\n  return (\n\n    <div className={'genres-wrapper' + (loaded ? ' loaded':'')}>\n      {loaded ?\n        <>\n        <div className='genre-search'>\n          <SearchBar placeholder='Search genres' searchValue={searchValue} setSearchValue={setSearchValue}/>\n        </div>\n\n        <div className={'genres-container' + (loaded ? ' loaded':'')}>\n        {getSortedGenreKeys(searchValue ? getMatchingGenres(searchValue, genreList) : genreList, artists.filter((artist) => artist.selected)).map((genreName) => {\n            return <GenreItem key={genreName} genreName={genreName} artistCount={countUnselected(genreList, genreName, artists)} selectHandler={selectHandler} selected={genreList[genreName].selected}/>\n          })}\n        </div>\n        </>\n        :\n        <div className='genre-loading-container'>\n          <WaveSpinner size={30} color=\"var(--spotify-white)\" loading={!loaded}/>\n          <p className='loading-genres-message'>Loading your genres...</p>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default Genres;","const baseUrl = require('config').serverBaseUrl;\n\nlet clientToken: string | null = null;\n\n// SERVER SHOULD SEND BACK THE TOKEN IN REPLY\nexport const getToken = async (code: string) => {\n  let response = await fetch(baseUrl + '/tokens', {\n    method: 'POST',\n    body: JSON.stringify({code}),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  clientToken = await response.json();\n};\n\nexport const getTracks = async () => {\n  if (!clientToken) return;\n\n  const response = await fetch(baseUrl + '/tracks', {\n    method: 'POST',\n    body: JSON.stringify({clientToken}),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return await response.json();\n};\n\nexport const getArtists = async (nextUrl: string | undefined) => {\n  if (!clientToken) return;\n  const response = await fetch(baseUrl + '/artists', {\n    method: 'POST',\n    body: JSON.stringify({clientToken, nextUrl}),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const artists = await response.json();\n  return artists;\n};\n\nexport const createPlaylist = async (playlistName: string, trackURIs: string[]) => {\n  if (!clientToken) return;\n  const response = await fetch(baseUrl + '/create', {\n    method: 'POST',\n    body: JSON.stringify({clientToken, playlistName, trackURIs}),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const playlistData = await response.json();\n  return playlistData;\n};\n\nexport const getPlaylistCover = async (playlistId: string) => {\n  if (!clientToken) return;\n  const response = await fetch(baseUrl + '/cover', {\n    method: 'POST',\n    body: JSON.stringify({clientToken, playlistId}),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const playlistData = await response.json();\n  return playlistData;\n};","import { TrackItem, ArtistData, Artist } from 'interfaces/spotifyObjects';\nimport { GenreDb } from 'interfaces/genreObjects';\nimport { getArtists } from 'apiService';\n\nexport function fetchArtistsWithOffset (code: string, setState: React.Dispatch<React.SetStateAction<Artist[]>>) {\n  const artistPromise = new Promise<GenreDb> ((resolve) => {\n    let nextUrl;\n    let genres: GenreDb;\n\n    async function fetchArtistsAsync (code: string, nextUrl: string | undefined) {\n      const artistData: ArtistData = await getArtists(nextUrl);\n      nextUrl = artistData.artists.next;\n\n      const newArtists = artistData.artists.items.map((artistObj) => {\n        return {...artistObj, selected: false}\n      });\n\n      await setState((prevArtists) => {\n        let updatedArtists = [...prevArtists, ...newArtists]\n        if (!nextUrl) genres = generateGenres(updatedArtists);\n        return updatedArtists;\n      });\n\n      if (nextUrl) {\n        fetchArtistsAsync (code, nextUrl);\n      } else {\n        resolve(genres);\n      }\n    };\n    fetchArtistsAsync(code, nextUrl);\n  })\n  return artistPromise;\n}\n\nexport function generateGenres (artists: Artist[]) {\n  const genreDb: GenreDb = {};\n  artists.forEach((artist) => {\n    artist.genres.forEach((artistGenre) => {\n      if (!genreDb[artistGenre]) {\n        genreDb[artistGenre] = {artists: [artist], selected: false};\n      } else {\n        genreDb[artistGenre].artists.push(artist);\n      }\n    })\n  })\n\n  return genreDb;\n};\n\nexport function markGenreArtists (artists: Artist[], selectedGenres: GenreDb) {\n  return artists.map((artist) => {\n    for (let i = 0; i < artist.genres.length; i++) {\n      if (Object.keys(selectedGenres).includes(artist.genres[i])) {\n        artist.selected = true;\n        return artist;\n      }\n    }\n    artist.selected = false;\n    return artist;\n  })\n};\n\nexport function filterSelectedGenres (list: GenreDb) {\n  return Object.entries(list).filter(([key, value]) => value.selected)\n  .reduce<GenreDb>((acc, [key, value]) => {\n    acc[key] = value\n    return acc;\n  }, {});\n};\n\nexport function artistToggleUpdate (artistId: string, artistList: Artist[]) {\n  return artistList.map((artist) => {\n    if (artist.id === artistId) {\n      let updatedArtist = Object.assign({}, artist);\n      updatedArtist.userDisabled = !updatedArtist.userDisabled;\n      return updatedArtist;\n    } else {\n      return artist;\n    }\n  });\n}\n\nexport function getSelectedTracks (artists: Artist[], tracks: TrackItem[]) {\n  const selectedArtists = artists.filter((artist) => artist.selected && !artist.userDisabled);\n\n  return tracks.filter((trackItem) => {\n    return trackItem.track.artists.some((trackArtist) => selectedArtists.findIndex((artist) => artist.id === trackArtist.id) !== -1);\n  })\n\n}","import './artist-item-style.scss';\nimport * as React from 'react';\nimport { Artist } from 'interfaces/spotifyObjects';\n\nexport interface Props {\n  artist: Artist;\n  toggleHandler: (artistId: string) => void;\n}\n\nconst ArtistItem: React.FC<Props> = ({ artist, toggleHandler }) => {\n\n  return (\n    <a className={'artist-item-container' + (artist.userDisabled ? ' user-disabled':'') }>\n      {artist.images[0] && <img src={artist.images[0].url} alt={'Image of artist ' + artist.name} onClick={() => toggleHandler(artist.id)}/>}\n      <p>{artist.name}</p>\n    </a>\n  );\n}\n\nexport default ArtistItem;","import './artists-style.scss';\nimport { Artist } from 'interfaces/spotifyObjects';\nimport ArtistItem from './Artist Item/artist-item-index';\n\nexport interface Props {\n  artistList: Artist[],\n  toggleHandler: (artistId: string) => void,\n  loaded: boolean\n}\n\nconst Artists: React.FC<Props> = ({ artistList, toggleHandler, loaded }) => {\n  return (\n    // SORT ARTISTS BY ALPHABETICAL ORDER\n    <div className={'artists-container' + (loaded ? ' loaded':'')}>\n      {artistList.length === 0 && <p className=\"choose-genre-message\">Choose a genre to view related artists.</p>}\n      {artistList.sort((a, b) => a.name < b.name ? -1 : 1)\n      .map((artist) => <ArtistItem artist={artist} key={artist.id} toggleHandler={toggleHandler}/>)}\n    </div>\n  );\n}\n\nexport default Artists;","import { TrackItem } from 'interfaces/spotifyObjects';\n\nexport function convertMsToMinsAndSecs(ms: number) {\n  var minutes = Math.floor(ms / 60000);\n  var seconds = parseInt(((ms % 60000) / 1000).toFixed(0));\n  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n}\n\nexport function joinArtistNames (trackItem: TrackItem) {\n  const artistNames = trackItem.track.artists.map((artist) => artist.name);\n  return artistNames.join(', ');\n}","import './playlist-item-style.scss';\nimport { TrackItem } from 'interfaces/spotifyObjects';\nimport { convertMsToMinsAndSecs, joinArtistNames } from './playlist-item-helpers';\nimport moment from 'moment';\n\nexport interface Props {\n  track: TrackItem,\n  toggleHandler: (trackId: string) => void,\n  disabled: boolean\n}\n\nconst PlaylistItem: React.FC<Props> = ({ track, disabled, toggleHandler }) => {\n  return (\n      <tr className={'playlist-item-container' + (disabled ? ' user-disabled':'')} onClick = {() => toggleHandler(track.track.id)}>\n        <td>{track.track.name}</td>\n        <td>{joinArtistNames(track)}</td>\n        <td>{track.track.album.name}</td>\n        <td>{moment(track.added_at).fromNow()}</td>\n        <td>{convertMsToMinsAndSecs(track.track.duration_ms)}</td>\n      </tr>\n  );\n}\n\nexport default PlaylistItem;","import * as React from 'react';\nimport { useState } from 'react';\nimport './playlist-style.scss';\nimport PlaylistItem from './Playlist Item/playlist-item-index';\nimport { TrackItem } from 'interfaces/spotifyObjects';\nimport { WaveSpinner, CircleSpinner } from 'react-spinners-kit';\n\nexport interface Props {\n  tracks: TrackItem[],\n  createHandler: (playlistName: string, trackURIs: string[]) => void,\n  loaded: boolean\n}\n\nconst Playlist: React.FC<Props> = ({ tracks, createHandler, loaded }) => {\n  let [nameField, setNameField] = useState('');\n  let [disabledTrackIds, setDisabledTrackIds] = useState<string[]>([]);\n  let [savingPlaylist, setSavingPlaylist] = useState<boolean>(false);\n\n  function toggleTrackHandler (trackId : string) {\n    if (disabledTrackIds.includes(trackId)) {\n      setDisabledTrackIds(disabledTrackIds.filter((disabledId) => disabledId !== trackId));\n    } else {\n      const updatedDisabledTrackIds = [...disabledTrackIds, trackId];\n      setDisabledTrackIds(updatedDisabledTrackIds);\n    }\n  }\n\n  async function submitHandler (e: React.FormEvent<HTMLFormElement>) {\n    setSavingPlaylist(true);\n    e.preventDefault();\n    const trackURIs = tracks.filter((track) => !disabledTrackIds.some((disabledId) => disabledId === track.track.id)).map((track) => track.track.uri);\n    setNameField('');\n    await createHandler(nameField, trackURIs);\n    setSavingPlaylist(false);\n  }\n\n  return (\n    <div className={'playlist-container' + (loaded ? ' loaded':'')}>\n\n      <div className='loading-screen'>\n        <WaveSpinner size={30} color='var(--spotify-white)' loading={!loaded}/>\n        <p className={'loading-text' + (loaded ? ' loaded':'')}>Loading your tracks...</p>\n      </div>\n      <form action=\"submit\" onSubmit={submitHandler} className='create-playlist'>\n        <input type='text' className={'playlist-title' + (loaded ? ' loaded':'')} placeholder='Playlist Name' value={nameField} onChange={(e) => setNameField(e.target.value)}/>\n        {savingPlaylist ? <div className='save-loader'><CircleSpinner size={15} loading={loaded} color='var(--spotify-green)'/></div> : <button className={'button-create' + (loaded ? ' loaded':'')} onClick={()=>submitHandler}><i className=\"fas fa-plus-circle\"></i></button>}\n      </form>\n\n\n      {loaded &&\n      <div className='table-wrapper'>\n        <table className='track-table'>\n          <thead>\n            <tr className={'playlist-headers' + (loaded ? ' loaded':'')}>\n              <th>TITLE</th>\n              <th>ARTIST</th>\n              <th>ALBUM</th>\n              <th>ADDED</th>\n              <th>LENGTH</th>\n            </tr>\n          </thead>\n          <tbody className='track-list'>\n            {tracks.map((track) => <PlaylistItem track={track} key={track.track.id} disabled={disabledTrackIds.includes(track.track.id)} toggleHandler={toggleTrackHandler}/>)}\n          </tbody>\n        </table>\n      </div>\n      }\n  </div>\n  );\n}\n\nexport default Playlist;","export default __webpack_public_path__ + \"static/media/Spotify_Icon_RGB_Green.cd66b8f6.png\";","import Modal from 'react-modal';\nimport { PlaylistData } from 'interfaces/spotifyObjects';\nimport './modal-style.scss'\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    'border-radius': '20px',\n    'background-color': 'var(--spotify-black)',\n    padding: '4%',\n    opacity: 1,\n    transform: 'translate(-50%, -50%)'\n  },\n  overlay: {zIndex: 2}\n};\n\nexport interface Props {\n  isOpen: boolean,\n  playlist: PlaylistData,\n  onRequestClose: () => void;\n}\n\nconst PlaylistCreatedModal: React.FC<Props> = ({ isOpen, playlist, onRequestClose }) => {\n  return (\n    <Modal isOpen={isOpen} onRequestClose={onRequestClose} style={customStyles}>\n      {\n        playlist.id &&\n        <div className='modal-wrapper'>\n          <div className='modal-container'>\n            <div className='created-message'>\n              <h1>Glorious Victory!</h1>\n              <p>Your playlist is created and waiting for you in your Spotify account.</p>\n              <a href={playlist.uri}>Open in Spotify</a>\n              <a href={playlist.external_urls.spotify} target='_blank'>Open in browser</a>\n            </div>\n            <div className='playlist-info'>\n              {playlist.cover && <img src={playlist.cover.url} alt=\"Playlist Image\" className='cover-image'/>}\n              <p>{playlist.name}</p>\n            </div>\n          </div>\n        </div>\n      }\n    </Modal>\n  );\n}\n\nexport default PlaylistCreatedModal;","import * as React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { TrackItem, Artist, PlaylistData, PlaylistCover } from 'interfaces/spotifyObjects';\nimport { GenreDb } from 'interfaces/genreObjects';\nimport Genres from './Genres/genres-index';\nimport { getToken, createPlaylist, getTracks, getPlaylistCover } from 'apiService';\nimport './main-style.scss';\nimport {\n  fetchArtistsWithOffset,\n  getSelectedTracks,\n  markGenreArtists,\n  filterSelectedGenres,\n  artistToggleUpdate\n } from './main-helpers';\nimport Artists from './Artists/artists-index';\nimport Playlist from './Playlist/playlist-index';\nimport icon from './Spotify_Icon_RGB_Green.png';\nimport PlaylistCreatedModal from './Modal/modal-index';\n\nconst Main: React.FC = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const coverGenerationWaitTime = 500; // Spotify takes a while to generate playlist cover image after playlist is created\n\n  let [tracks, setTracks] = useState<TrackItem[]>([]);\n  let [artists, setArtists] = useState<Artist[]>([]);\n  let [genres, setGenres] = useState<GenreDb>({});\n  let [createdPlaylist, setCreatedPlaylist] = useState<any>({});\n  const [modalIsOpen,setIsOpen] = React.useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal(){\n    setIsOpen(false);\n  }\n\n  const code = searchParams.get('code');\n\n  useEffect(() => {\n    if (!code) return;\n\n    const fetchData = async () => {\n      await getToken(code);\n\n      if (tracks.length === 0) {\n       const trackList = getTracks().then((trackList) => {\n         console.log(trackList.length + ' tracks received');\n         setTracks(trackList);\n       });\n      }\n      if (artists.length === 0) {\n        fetchArtistsWithOffset(code, setArtists).then((genres) => {\n          setGenres(genres)\n        });\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const selectedGenres = filterSelectedGenres(genres);\n    const updatedArtists = markGenreArtists(artists, selectedGenres);\n    setArtists(updatedArtists);\n  }, [genres]);\n\n\n  function selectGenreHandler (genreName: string) {\n    const newGenreDb = Object.assign({}, genres);\n    newGenreDb[genreName].selected = !newGenreDb[genreName].selected;\n    setGenres(newGenreDb);\n  }\n\n  function toggleArtistHandler (artistId: string) {\n    const updatedArtists = artistToggleUpdate(artistId, artists);\n    setArtists(updatedArtists);\n  }\n\n  async function createPlaylistHandler (playlistName: string, trackURIs: string[]) {\n    if (!code) return;\n    const playlistData: PlaylistData = await createPlaylist(playlistName, trackURIs);\n    await new Promise((resolve, reject) => setTimeout(() => resolve(''), coverGenerationWaitTime));\n    const playlistCover: PlaylistCover[] = await getPlaylistCover(playlistData.id);\n    playlistData.cover = playlistCover[0];\n    setCreatedPlaylist(playlistData);\n  }\n\n  useEffect(() => {\n    if (Object.keys(createdPlaylist).length > 0) {\n      openModal();\n    }\n  }, [createdPlaylist])\n\n  return (\n    <div className='main-container'>\n\n      <PlaylistCreatedModal isOpen={modalIsOpen} onRequestClose={closeModal} playlist={createdPlaylist}/>\n      <div className='title'>\n        <h1>Listspotter.</h1>\n        <p>Powered by <img src={icon} className='spotify-icon' alt=\"Spotify icon\"/></p>\n      </div>\n\n      <div className=\"genre-artist-wrapper\">\n        <Genres genreList={genres} artists={artists} selectHandler={selectGenreHandler} loaded={Object.keys(genres).length > 0}/>\n        <Artists artistList={artists.filter((artist) => artist.selected)} loaded={Object.keys(genres).length > 0} toggleHandler={toggleArtistHandler}/>\n        {Object.keys(genres).length > 0 && <p className=\"scroll-message\">SCROLL RIGHT</p>}\n      </div>\n\n      <div className=\"playlist-wrapper\">\n        {<Playlist tracks={getSelectedTracks(artists, tracks)} loaded={tracks.length > 0} createHandler={createPlaylistHandler}/>}\n      </div>\n\n    </div>\n  );\n}\n\nexport default Main;","import Login from './components/Login/login-index';\nimport Main from './components/Main/main-index';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path=\"/main\">\n            <Main/>\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}